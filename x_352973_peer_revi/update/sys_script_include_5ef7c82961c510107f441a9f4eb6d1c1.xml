<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_352973_peer_revi.PeerReview</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>support for different UIs like for service portal</description>
        <name>PeerReview</name>
        <script><![CDATA[var PeerReview = Class.create();
PeerReview.prototype = {
    initialize: function() {},
    getUserData: getUserData,
    getUserScore: getUserScore,
    getFeedbackList: getFeedbackList,
    insertFeedback: insertFeedback,
    getQuotes: getQuotes,
    type: 'PeerReview'
};

var baseUtils = new Base();

var CONSTANTS = {
    fields: {
        user_score: 'sys_id,user,nps',
        feedback: 'sys_id,number,score,receiver,submitter,question',
        sys_user: 'sys_id,user_name,name,photo,first_name,last_name'
    },
    short_display_length: 125
};

/*
Get the user record data given a user sys_id.
userId: The sys_id of the user to get records for.
*/
function getUserData(userId) {
    var response,
        grData = baseUtils.getRecords('sys_user', false, '^sys_id=' + userId),
        dataList = getRecordsFromGr(grData, CONSTANTS.fields.sys_user);
    if (dataList && dataList.length == 1) {
        response = dataList[0];
        response.initials = response.fields.first_name.value.substring(0, 1) +
            response.fields.last_name.value.substring(0, 1);
    }
    return response;
}

/*
Get the user score data given a user sys_id.
userId: The sys_id of the user to get records for.
*/
function getUserScore(userId) {
    var response,
        grData = baseUtils.getRecords(baseUtils.CONSTANTS.tables.user_score, false, '^user=' + userId),
        dataList = getRecordsFromGr(grData, CONSTANTS.fields.user_score);
    if (dataList && dataList.length == 1) {
        response = dataList[0];
    }
    return response;
}

/*
Get the list of feedback records given a user sys_id.
userId: The sys_id of the user to get records for.
*/
function getFeedbackList(userId) {
    var response = [],
        responseObj,
        i, j,
        grData = baseUtils.getRecords(baseUtils.CONSTANTS.tables.feedback, false, '^receiver=' + userId),
        dataList = getRecordsFromGr(grData, CONSTANTS.fields.feedback); //, getQuestionResponsesList);

    // Loop through the list of feedback records, then the list of questions being
    // retrieved and place into a single array with the author and text.
    for (i = 0; i < dataList.length; i++) {
        responseObj = {
            fields: dataList[i].fields,
            sys_id: dataList[i].sys_id,
            answer_full: dataList[i].fields.question.value,
            answer_short: dataList[i].fields.question.value.substring(0, CONSTANTS.short_display_length),
            showMore: false
        };
        if (responseObj.answer_full.length > CONSTANTS.short_display_length) {
            responseObj.answer_short += "...";
        }
        response.push(responseObj);
    }

    return response;
}

/*
Get field data as an array from a given GlideRecord and delimited field list.
grData: The GlideRecord object to get data out of.
fields: The coma separated list of field names to extract.
innerFunc: An optional function to invoke while inside the GlideRecord while loop.
        This should be any internal operations needed like getting records from
        a child table. Example here is the question_answers from a feedback record.
*/
function getRecordsFromGr(grData, fields, innerFunc) {
    var response = [],
        responseObj,
        variableList,
        i;
    grData = grData || false;
    fields = fields || false;

    if (grData && fields) {
        while (grData.next()) {
            responseObj = getRecordElementsFromGr(grData, fields);

            // Run any inner function which typically should be
            // a child GlideRecord extraction.
            if (innerFunc) {
                try {
                    variableList = innerFunc.call(this, grData.getValue('sys_id'));
                    if (variableList) {
                        responseObj.variables = variableList;
                    }
                } catch (ex) {
                    gs.error(ex);
                }
            }

            if (responseObj) {
                response.push(responseObj);
            }
        }
    }
    return response;
}

/*
Given a GlideRecord and delimited field list, extract the GlideRecord field elements.
grData: The GlideRecord object to get data out of.
fields: The coma separated list of field names to extract.
*/
function getRecordElementsFromGr(grData, fields) {
    var response;
    if (grData && fields) {
        response = {
            fields: {},
            sys_id: grData.getValue('sys_id')
        };
        $sp.getRecordElements(response.fields, grData, fields);
    }
    return response;
}

/*
Given a value object with structure { score, question, submitter, receiver }
insert into the feedback table.
*/
function insertFeedback(valueObject) {
    return baseUtils.insertRecord(baseUtils.CONSTANTS.tables.feedback, {
        score: valueObject.score,
        question: valueObject.question,
        submitter: valueObject.submitter,
        receiver: valueObject.receiver
    });
}

/*
Given a type of quote, attempt to retrieve a quote object.
*/
function getQuotes(quoteType) {
    quoteType = quoteType || "Random";
    try {
        var restMessage = new sn_ws.RESTMessageV2("Quotes", quoteType + " Quotes");
        var response = restMessage.execute();
        var responseBody = response.getBody();
        var bodyJSON = JSON.parse(responseBody);
        var httpStatus = response.getStatusCode();
        baseUtils.logJSON({
            body: responseBody,
            status: httpStatus
        });
        if (httpStatus != 200) {
            return false;
        }
        return bodyJSON;
    } catch (ex) {
        var message = ex.message;
        baseUtils.log(message);
    }
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-27 16:39:26</sys_created_on>
        <sys_id>5ef7c82961c510107f441a9f4eb6d1c1</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PeerReview</sys_name>
        <sys_package display_value="Peer Review" source="x_352973_peer_revi">e9333675db50101033361461399619c9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Peer Review">e9333675db50101033361461399619c9</sys_scope>
        <sys_update_name>sys_script_include_5ef7c82961c510107f441a9f4eb6d1c1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-05-27 16:39:26</sys_updated_on>
    </sys_script_include>
</record_update>
